{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SSF: Simple Socket Functions","text":"<p>Minimal C++ code snippet to build something.</p> <p>This repository is a result of personal practice for Doxygen + Doxybook2 + MkDocs combination. The page theme is MkDocs Material.</p>"},{"location":"#references","title":"References","text":"<p>There are some known examples for C++ project's documentation. Wish they can help you either... and special thanks to the doxybook and its author, Matus Novak</p> <ul> <li>Clear, Functional C++ Documentation with Sphinx + Breathe + Doxygen + CMake<ul> <li>TartanLlama/cpp-documentation-example</li> </ul> </li> <li>Doxybook2<ul> <li>Doxygen</li> <li>MkDocs</li> <li>Doxybook(deprecated)</li> </ul> </li> </ul>"},{"location":"#license","title":"License","text":"<p>You can do what you want with the code. Visit the https://creativecommons.org/licenses/by/4.0/ for the license details.</p>"},{"location":"dir_68267d1309a1af8e8297ef4c3efbcdba/","title":"src","text":""},{"location":"dir_68267d1309a1af8e8297ef4c3efbcdba/#files","title":"Files","text":"Name src/socket.cpp src/socket.hpp src/socket_test.cpp <p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"index_classes/","title":"Classes","text":"<ul> <li>struct addrinfo identify an Internet host and a service </li> <li>namespace std </li> </ul> <p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"index_examples/","title":"Examples","text":"<p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"index_files/","title":"Files","text":"<ul> <li>dir src <ul> <li>file cpp </li> <li>file hpp </li> <li>file cpp </li> </ul> </li> </ul> <p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"index_groups/","title":"Modules","text":"<p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"index_namespaces/","title":"Namespaces","text":"<ul> <li>namespace std </li> </ul> <p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"index_pages/","title":"Pages","text":"<p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"namespacestd/","title":"std","text":"<p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"socket_8cpp/","title":"src/socket.cpp","text":""},{"location":"socket_8cpp/#namespaces","title":"Namespaces","text":"Name std"},{"location":"socket_8cpp/#functions","title":"Functions","text":"Name int64_t socket_create(const addrinfo &amp; hint)create a socket without error check uint32_t socket_create(const addrinfo &amp; hint, int64_t &amp; sd)create 1 socket uint32_t socket_bind(int64_t sd, const sockaddr_in &amp; local)bind the socket to given address uint32_t socket_bind(int64_t sd, const sockaddr_in6 &amp; local)bind the socket to given address uint32_t socket_listen(int64_t sd)start listening with the socket uint32_t socket_connect(int64_t sd, const sockaddr_in &amp; remote)try connect to given endpoint(IPv4) uint32_t socket_connect(int64_t sd, const sockaddr_in6 &amp; remote)try connect to given endpoint(IPv6) uint32_t socket_accept(int64_t ln, int64_t &amp; sd)accept a connection request and return client socket uint32_t socket_get_name(int64_t sd, sockaddr_in &amp; local)get the socket's address uint32_t socket_get_name(int64_t sd, sockaddr_in6 &amp; local)get the socket's address uint32_t socket_get_peer(int64_t sd, sockaddr_in &amp; remote)get connected peer's address uint32_t socket_get_peer(int64_t sd, sockaddr_in6 &amp; remote)get connected peer's address uint32_t socket_set_option(int64_t sd, int64_t level, int64_t option, int64_t value)change the socket's option uint32_t socket_set_option_reuse_address(int64_t sd)make socket to reuse address uint32_t socket_set_option_nodelay(int64_t sd)make tcp send without delay uint32_t socket_set_option_timout(int64_t sd, chrono::microseconds us, int64_t option) uint32_t socket_set_option_timout(int64_t sd, uint32_t us, int64_t option) uint32_t socket_set_option_send_timout(int64_t sd, uint32_t us)set the socket's send timeout uint32_t socket_set_option_recv_timout(int64_t sd, uint32_t us)set the socket's recv timeout"},{"location":"socket_8cpp/#functions-documentation","title":"Functions Documentation","text":""},{"location":"socket_8cpp/#function-socket_create","title":"function socket_create","text":"<pre><code>int64_t socket_create(\nconst addrinfo &amp; hint\n)\n</code></pre> <p>create a socket without error check </p>"},{"location":"socket_8cpp/#function-socket_create_1","title":"function socket_create","text":"<pre><code>uint32_t socket_create(\nconst addrinfo &amp; hint,\nint64_t &amp; sd\n)\n</code></pre> <p>create 1 socket </p> <p>Parameters: </p> <ul> <li>hint family, type, protocol </li> <li>sd reference to save the new socket </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_bind","title":"function socket_bind","text":"<pre><code>uint32_t socket_bind(\nint64_t sd,\nconst sockaddr_in &amp; local\n)\n</code></pre> <p>bind the socket to given address </p> <p>Parameters: </p> <ul> <li>sd socket to bind </li> <li>local IPv4 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_bind_1","title":"function socket_bind","text":"<pre><code>uint32_t socket_bind(\nint64_t sd,\nconst sockaddr_in6 &amp; local\n)\n</code></pre> <p>bind the socket to given address </p> <p>Parameters: </p> <ul> <li>sd socket to bind </li> <li>local IPv6 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_listen","title":"function socket_listen","text":"<pre><code>uint32_t socket_listen(\nint64_t sd\n)\n</code></pre> <p>start listening with the socket </p> <p>Parameters: </p> <ul> <li>sd socket to start listen </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p> <p>The <code>backlog</code> value is fixed to 7.</p>"},{"location":"socket_8cpp/#function-socket_connect","title":"function socket_connect","text":"<pre><code>uint32_t socket_connect(\nint64_t sd,\nconst sockaddr_in &amp; remote\n)\n</code></pre> <p>try connect to given endpoint(IPv4) </p> <p>Parameters: </p> <ul> <li>sd socket to start connect </li> <li>remote IPv4 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_connect_1","title":"function socket_connect","text":"<pre><code>uint32_t socket_connect(\nint64_t sd,\nconst sockaddr_in6 &amp; remote\n)\n</code></pre> <p>try connect to given endpoint(IPv6) </p> <p>Parameters: </p> <ul> <li>sd socket to start connect </li> <li>remote IPv6 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_accept","title":"function socket_accept","text":"<pre><code>uint32_t socket_accept(\nint64_t ln,\nint64_t &amp; sd\n)\n</code></pre> <p>accept a connection request and return client socket </p> <p>Parameters: </p> <ul> <li>ln listener socket </li> <li>sd reference to descriptor to save the new connected socket </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_get_name","title":"function socket_get_name","text":"<pre><code>uint32_t socket_get_name(\nint64_t sd,\nsockaddr_in &amp; local\n)\n</code></pre> <p>get the socket's address </p> <p>Parameters: </p> <ul> <li>sd socket to query the bound address </li> <li>local object to receive IPv4 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_get_name_1","title":"function socket_get_name","text":"<pre><code>uint32_t socket_get_name(\nint64_t sd,\nsockaddr_in6 &amp; local\n)\n</code></pre> <p>get the socket's address </p> <p>Parameters: </p> <ul> <li>sd socket to query the bound address </li> <li>local object to receive IPv6 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_get_peer","title":"function socket_get_peer","text":"<pre><code>uint32_t socket_get_peer(\nint64_t sd,\nsockaddr_in &amp; remote\n)\n</code></pre> <p>get connected peer's address </p> <p>Parameters: </p> <ul> <li>sd socket to query the peer address </li> <li>remote object to receive IPv4 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_get_peer_1","title":"function socket_get_peer","text":"<pre><code>uint32_t socket_get_peer(\nint64_t sd,\nsockaddr_in6 &amp; remote\n)\n</code></pre> <p>get connected peer's address </p> <p>Parameters: </p> <ul> <li>sd socket to query the peer address </li> <li>remote object to receive IPv6 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_set_option","title":"function socket_set_option","text":"<pre><code>uint32_t socket_set_option(\nint64_t sd,\nint64_t level,\nint64_t option,\nint64_t value\n)\n</code></pre> <p>change the socket's option </p> <p>Parameters: </p> <ul> <li>sd </li> <li>level </li> <li>option </li> <li>value </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_set_option_reuse_address","title":"function socket_set_option_reuse_address","text":"<pre><code>uint32_t socket_set_option_reuse_address(\nint64_t sd\n)\n</code></pre> <p>make socket to reuse address </p> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_set_option_nodelay","title":"function socket_set_option_nodelay","text":"<pre><code>uint32_t socket_set_option_nodelay(\nint64_t sd\n)\n</code></pre> <p>make tcp send without delay </p> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_set_option_timout","title":"function socket_set_option_timout","text":"<pre><code>uint32_t socket_set_option_timout(\nint64_t sd,\nchrono::microseconds us,\nint64_t option\n)\n</code></pre>"},{"location":"socket_8cpp/#function-socket_set_option_timout_1","title":"function socket_set_option_timout","text":"<pre><code>uint32_t socket_set_option_timout(\nint64_t sd,\nuint32_t us,\nint64_t option\n)\n</code></pre>"},{"location":"socket_8cpp/#function-socket_set_option_send_timout","title":"function socket_set_option_send_timout","text":"<pre><code>uint32_t socket_set_option_send_timout(\nint64_t sd,\nuint32_t us\n)\n</code></pre> <p>set the socket's send timeout </p> <p>Parameters: </p> <ul> <li>sd socket to change timeout </li> <li>us microsecond fot the duration </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#function-socket_set_option_recv_timout","title":"function socket_set_option_recv_timout","text":"<pre><code>uint32_t socket_set_option_recv_timout(\nint64_t sd,\nuint32_t us\n)\n</code></pre> <p>set the socket's recv timeout </p> <p>Parameters: </p> <ul> <li>sd socket to change timeout </li> <li>us microsecond fot the duration </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8cpp/#source-code","title":"Source code","text":"<pre><code>#include &lt;cerrno&gt;\n#include &lt;chrono&gt;\n#include &lt;system_error&gt;\n#include \"socket.hpp\"\n#if __has_include(&lt;WinSock2.h&gt;) // use winsock\n#include &lt;WS2tcpip.h&gt;\n#include &lt;WinSock2.h&gt;\n#include &lt;ws2def.h&gt;\n#elif __has_include(&lt;netinet/in.h&gt;) // use netinet\n#include &lt;netdb.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;netinet/tcp.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#endif\nusing namespace std;\nint64_t socket_create(const addrinfo&amp; hint) noexcept {\nreturn ::socket(hint.ai_family, //\nhint.ai_socktype, hint.ai_protocol);\n}\nuint32_t socket_create(const addrinfo&amp; hint, int64_t&amp; sd) noexcept {\nsd = socket_create(hint);\nreturn sd &lt; 0 ? socket_recent() : 0;\n}\nuint32_t socket_bind(int64_t sd, const sockaddr_in&amp; local) noexcept {\nif (::bind(sd, (const sockaddr*)&amp;local, sizeof(sockaddr_in)))\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_bind(int64_t sd, const sockaddr_in6&amp; local) noexcept {\n// bind socket and address\nif (::bind(sd, (const sockaddr*)&amp;local, sizeof(sockaddr_in6)))\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_listen(int64_t sd) noexcept {\n::listen(sd, 7);\nreturn socket_recent();\n}\nuint32_t socket_connect(int64_t sd, const sockaddr_in&amp; remote) noexcept {\nauto* ptr = reinterpret_cast&lt;const sockaddr*&gt;(&amp;remote);\nif (::connect(sd, ptr, sizeof(sockaddr_in)) &lt; 0)\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_connect(int64_t sd, const sockaddr_in6&amp; remote) noexcept {\nauto* ptr = reinterpret_cast&lt;const sockaddr*&gt;(&amp;remote);\nif (::connect(sd, ptr, sizeof(sockaddr_in6)) &lt; 0)\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_accept(int64_t ln, int64_t&amp; sd) noexcept {\nsd = ::accept(ln, nullptr, nullptr);\nreturn socket_recent();\n}\nuint32_t socket_get_name(int64_t sd, sockaddr_in&amp; local) noexcept {\nsocklen_t len = sizeof(sockaddr_in);\nif (::getsockname(sd, (sockaddr*)&amp;local, &amp;len))\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_get_name(int64_t sd, sockaddr_in6&amp; local) noexcept {\nsocklen_t len = sizeof(sockaddr_in6);\nif (::getsockname(sd, (sockaddr*)&amp;local, &amp;len))\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_get_peer(int64_t sd, sockaddr_in&amp; local) noexcept {\nsocklen_t len = sizeof(sockaddr_in);\nif (::getpeername(sd, (sockaddr*)&amp;local, &amp;len))\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_get_peer(int64_t sd, sockaddr_in6&amp; local) noexcept {\nsocklen_t len = sizeof(sockaddr_in6);\nif (::getpeername(sd, (sockaddr*)&amp;local, &amp;len))\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_set_option(int64_t sd, int64_t level, //\nint64_t option, int64_t value) noexcept {\nif (auto ec = ::setsockopt(sd, static_cast&lt;int&gt;(level), static_cast&lt;int&gt;(option), (char*)&amp;value, sizeof(value)))\nreturn socket_recent();\nreturn 0;\n}\nuint32_t socket_set_option_reuse_address(int64_t sd) noexcept {\nreturn socket_set_option(sd, SOL_SOCKET, SO_REUSEADDR, true);\n}\nuint32_t socket_set_option_nodelay(int64_t sd) noexcept {\nreturn socket_set_option(sd, IPPROTO_TCP, TCP_NODELAY, true);\n}\nuint32_t socket_set_option_timout(int64_t sd, chrono::microseconds us, int64_t option) noexcept {\nconst auto s = chrono::duration_cast&lt;chrono::seconds&gt;(us);\nus -= s;\ntimeval timeout{};\ntimeout.tv_sec = static_cast&lt;decltype(timeout.tv_sec)&gt;(s.count());\ntimeout.tv_usec = static_cast&lt;decltype(timeout.tv_usec)&gt;(us.count());\nif (::setsockopt(sd, SOL_SOCKET, static_cast&lt;int&gt;(option), //\n(char*)&amp;timeout, sizeof(timeval)) != 0) {\nreturn socket_recent();\n}\nreturn 0;\n}\nuint32_t socket_set_option_timout(int64_t sd, uint32_t us, int64_t option) noexcept {\nreturn socket_set_option_timout(sd, chrono::microseconds{us}, option);\n}\nuint32_t socket_set_option_send_timout(int64_t sd, //\nuint32_t us) noexcept {\nreturn socket_set_option_timout(sd, chrono::microseconds{us}, SO_SNDTIMEO);\n}\nuint32_t socket_set_option_recv_timout(int64_t sd, //\nuint32_t us) noexcept {\nreturn socket_set_option_timout(sd, chrono::microseconds{us}, SO_RCVTIMEO);\n}\n#if __has_include(&lt;WinSock2.h&gt;) // using winsock\nbool socket_is_valid(int64_t h) noexcept {\nreturn h != INVALID_SOCKET;\n}\nWSADATA wsa_data{};\nvoid socket_setup() noexcept(false) {\nif (wsa_data.wVersion) // already initialized\nreturn;\n// init version 2.2\nif (::WSAStartup(MAKEWORD(2, 2), &amp;wsa_data)) {\nauto errc = WSAGetLastError();\nthrow system_error{errc, system_category(), \"WSAStartup\"};\n}\n}\nvoid socket_teardown() noexcept {\n// not initialized or released\nif (wsa_data.wVersion == 0)\nreturn;\n::WSACleanup();\nwsa_data.wVersion = 0;\n}\nuint32_t socket_recent() noexcept {\nreturn static_cast&lt;uint32_t&gt;(WSAGetLastError());\n}\nbool socket_would_block(int ec) noexcept {\nreturn ec == WSAEWOULDBLOCK || ec == EWOULDBLOCK || ec == EINPROGRESS || ec == ERROR_IO_PENDING;\n}\nuint32_t socket_close(int64_t sd) noexcept {\nreturn ::shutdown(sd, SD_BOTH), ::closesocket(sd);\n}\nuint32_t socket_set_option_nonblock(int64_t sd) noexcept {\nu_long mode = TRUE;\nreturn ::ioctlsocket(sd, FIONBIO, &amp;mode);\n}\n#elif __has_include(&lt;netinet/in.h&gt;) // using netinet\nbool socket_is_valid(int64_t h) noexcept {\nreturn h &gt; 0;\n}\nvoid socket_setup() noexcept(false) {\n// do nothing for posix system. network operation already available\n}\nvoid socket_teardown() noexcept {\n}\nuint32_t socket_recent() noexcept {\nreturn static_cast&lt;uint32_t&gt;(errno);\n}\nbool socket_would_block(int ec) noexcept {\nreturn ec == EINPROGRESS;\n}\nuint32_t socket_close(int64_t sd) noexcept {\nreturn shutdown(sd, SHUT_RDWR), close(sd), errno;\n}\nuint32_t socket_set_option_nonblock(int64_t sd) noexcept {\n// make non-block/async\nif (fcntl(sd, F_SETFL, O_NONBLOCK) != 0)\nreturn errno;\nreturn 0;\n}\n#endif\n</code></pre> <p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"socket_8hpp/","title":"src/socket.hpp","text":""},{"location":"socket_8hpp/#functions","title":"Functions","text":"Name void socket_setup()initialize platform specific network module void socket_teardown()release platform specific network module uint32_t socket_recent()network related error bool socket_is_valid(int64_t sd)check if given socket descriptor is valid uint32_t socket_create(const addrinfo &amp; hint, int64_t &amp; sd)create 1 socket uint32_t socket_close(int64_t sd)dispose the given socket uint32_t socket_bind(int64_t sd, const sockaddr_in &amp; local)bind the socket to given address uint32_t socket_bind(int64_t sd, const sockaddr_in6 &amp; local)bind the socket to given address uint32_t socket_listen(int64_t sd)start listening with the socket uint32_t socket_connect(int64_t sd, const sockaddr_in &amp; remote)try connect to given endpoint(IPv4) uint32_t socket_connect(int64_t sd, const sockaddr_in6 &amp; remote)try connect to given endpoint(IPv6) uint32_t socket_accept(int64_t ln, int64_t &amp; sd)accept a connection request and return client socket uint32_t socket_get_name(int64_t sd, sockaddr_in &amp; local)get the socket's address uint32_t socket_get_name(int64_t sd, sockaddr_in6 &amp; local)get the socket's address uint32_t socket_get_peer(int64_t sd, sockaddr_in &amp; remote)get connected peer's address uint32_t socket_get_peer(int64_t sd, sockaddr_in6 &amp; remote)get connected peer's address uint32_t socket_set_option(int64_t sd, int64_t level, int64_t option, int64_t value)change the socket's option uint32_t socket_set_option_nonblock(int64_t sd)make socket to operate in non-blocking mode uint32_t socket_set_option_reuse_address(int64_t sd)make socket to reuse address uint32_t socket_set_option_nodelay(int64_t sd)make tcp send without delay uint32_t socket_set_option_send_timout(int64_t sd, uint32_t us)set the socket's send timeout uint32_t socket_set_option_recv_timout(int64_t sd, uint32_t us)set the socket's recv timeout bool socket_would_block(uint32_t ec)test if the error code is for non-blocking"},{"location":"socket_8hpp/#functions-documentation","title":"Functions Documentation","text":""},{"location":"socket_8hpp/#function-socket_setup","title":"function socket_setup","text":"<pre><code>void socket_setup()\n</code></pre> <p>initialize platform specific network module </p> <p>Exceptions: </p> <ul> <li>std::system_error </li> </ul>"},{"location":"socket_8hpp/#function-socket_teardown","title":"function socket_teardown","text":"<pre><code>void socket_teardown()\n</code></pre> <p>release platform specific network module </p>"},{"location":"socket_8hpp/#function-socket_recent","title":"function socket_recent","text":"<pre><code>uint32_t socket_recent()\n</code></pre> <p>network related error </p> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_is_valid","title":"function socket_is_valid","text":"<pre><code>bool socket_is_valid(\nint64_t sd\n)\n</code></pre> <p>check if given socket descriptor is valid </p> <p>Parameters: </p> <ul> <li>sd </li> </ul> <p>Return: </p> <ul> <li>true the sd is considered valid </li> <li>false negative or <code>INVALID_SOCKET</code></li> </ul>"},{"location":"socket_8hpp/#function-socket_create","title":"function socket_create","text":"<pre><code>uint32_t socket_create(\nconst addrinfo &amp; hint,\nint64_t &amp; sd\n)\n</code></pre> <p>create 1 socket </p> <p>Parameters: </p> <ul> <li>hint family, type, protocol </li> <li>sd reference to save the new socket </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_close","title":"function socket_close","text":"<pre><code>uint32_t socket_close(\nint64_t sd\n)\n</code></pre> <p>dispose the given socket </p> <p>Parameters: </p> <ul> <li>sd </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_bind","title":"function socket_bind","text":"<pre><code>uint32_t socket_bind(\nint64_t sd,\nconst sockaddr_in &amp; local\n)\n</code></pre> <p>bind the socket to given address </p> <p>Parameters: </p> <ul> <li>sd socket to bind </li> <li>local IPv4 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_bind_1","title":"function socket_bind","text":"<pre><code>uint32_t socket_bind(\nint64_t sd,\nconst sockaddr_in6 &amp; local\n)\n</code></pre> <p>bind the socket to given address </p> <p>Parameters: </p> <ul> <li>sd socket to bind </li> <li>local IPv6 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_listen","title":"function socket_listen","text":"<pre><code>uint32_t socket_listen(\nint64_t sd\n)\n</code></pre> <p>start listening with the socket </p> <p>Parameters: </p> <ul> <li>sd socket to start listen </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p> <p>The <code>backlog</code> value is fixed to 7.</p>"},{"location":"socket_8hpp/#function-socket_connect","title":"function socket_connect","text":"<pre><code>uint32_t socket_connect(\nint64_t sd,\nconst sockaddr_in &amp; remote\n)\n</code></pre> <p>try connect to given endpoint(IPv4) </p> <p>Parameters: </p> <ul> <li>sd socket to start connect </li> <li>remote IPv4 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_connect_1","title":"function socket_connect","text":"<pre><code>uint32_t socket_connect(\nint64_t sd,\nconst sockaddr_in6 &amp; remote\n)\n</code></pre> <p>try connect to given endpoint(IPv6) </p> <p>Parameters: </p> <ul> <li>sd socket to start connect </li> <li>remote IPv6 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_accept","title":"function socket_accept","text":"<pre><code>uint32_t socket_accept(\nint64_t ln,\nint64_t &amp; sd\n)\n</code></pre> <p>accept a connection request and return client socket </p> <p>Parameters: </p> <ul> <li>ln listener socket </li> <li>sd reference to descriptor to save the new connected socket </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_get_name","title":"function socket_get_name","text":"<pre><code>uint32_t socket_get_name(\nint64_t sd,\nsockaddr_in &amp; local\n)\n</code></pre> <p>get the socket's address </p> <p>Parameters: </p> <ul> <li>sd socket to query the bound address </li> <li>local object to receive IPv4 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_get_name_1","title":"function socket_get_name","text":"<pre><code>uint32_t socket_get_name(\nint64_t sd,\nsockaddr_in6 &amp; local\n)\n</code></pre> <p>get the socket's address </p> <p>Parameters: </p> <ul> <li>sd socket to query the bound address </li> <li>local object to receive IPv6 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_get_peer","title":"function socket_get_peer","text":"<pre><code>uint32_t socket_get_peer(\nint64_t sd,\nsockaddr_in &amp; remote\n)\n</code></pre> <p>get connected peer's address </p> <p>Parameters: </p> <ul> <li>sd socket to query the peer address </li> <li>remote object to receive IPv4 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_get_peer_1","title":"function socket_get_peer","text":"<pre><code>uint32_t socket_get_peer(\nint64_t sd,\nsockaddr_in6 &amp; remote\n)\n</code></pre> <p>get connected peer's address </p> <p>Parameters: </p> <ul> <li>sd socket to query the peer address </li> <li>remote object to receive IPv6 address </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_set_option","title":"function socket_set_option","text":"<pre><code>uint32_t socket_set_option(\nint64_t sd,\nint64_t level,\nint64_t option,\nint64_t value\n)\n</code></pre> <p>change the socket's option </p> <p>Parameters: </p> <ul> <li>sd </li> <li>level </li> <li>option </li> <li>value </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_set_option_nonblock","title":"function socket_set_option_nonblock","text":"<pre><code>uint32_t socket_set_option_nonblock(\nint64_t sd\n)\n</code></pre> <p>make socket to operate in non-blocking mode </p> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_set_option_reuse_address","title":"function socket_set_option_reuse_address","text":"<pre><code>uint32_t socket_set_option_reuse_address(\nint64_t sd\n)\n</code></pre> <p>make socket to reuse address </p> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_set_option_nodelay","title":"function socket_set_option_nodelay","text":"<pre><code>uint32_t socket_set_option_nodelay(\nint64_t sd\n)\n</code></pre> <p>make tcp send without delay </p> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_set_option_send_timout","title":"function socket_set_option_send_timout","text":"<pre><code>uint32_t socket_set_option_send_timout(\nint64_t sd,\nuint32_t us\n)\n</code></pre> <p>set the socket's send timeout </p> <p>Parameters: </p> <ul> <li>sd socket to change timeout </li> <li>us microsecond fot the duration </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_set_option_recv_timout","title":"function socket_set_option_recv_timout","text":"<pre><code>uint32_t socket_set_option_recv_timout(\nint64_t sd,\nuint32_t us\n)\n</code></pre> <p>set the socket's recv timeout </p> <p>Parameters: </p> <ul> <li>sd socket to change timeout </li> <li>us microsecond fot the duration </li> </ul> <p>Return: error code from <code>errno</code> or <code>WSAGetLastError</code></p>"},{"location":"socket_8hpp/#function-socket_would_block","title":"function socket_would_block","text":"<pre><code>bool socket_would_block(\nuint32_t ec\n)\n</code></pre> <p>test if the error code is for non-blocking </p>"},{"location":"socket_8hpp/#source-code","title":"Source code","text":"<pre><code>#pragma once\n#include &lt;cstdint&gt;\nstruct addrinfo;\nstruct sockaddr_in;\nstruct sockaddr_in6;\nvoid socket_setup() noexcept(false);\nvoid socket_teardown() noexcept;\nuint32_t socket_recent() noexcept;\nbool socket_is_valid(int64_t sd) noexcept;\nuint32_t socket_create(const addrinfo&amp; hint, int64_t&amp; sd) noexcept;\nuint32_t socket_close(int64_t sd) noexcept;\nuint32_t socket_bind(int64_t sd, const sockaddr_in&amp; local) noexcept;\nuint32_t socket_bind(int64_t sd, const sockaddr_in6&amp; local) noexcept;\nuint32_t socket_listen(int64_t sd) noexcept;\nuint32_t socket_connect(int64_t sd, const sockaddr_in&amp; remote) noexcept;\nuint32_t socket_connect(int64_t sd, const sockaddr_in6&amp; remote) noexcept;\nuint32_t socket_accept(int64_t ln, int64_t&amp; sd) noexcept;\nuint32_t socket_get_name(int64_t sd, sockaddr_in&amp; local) noexcept;\nuint32_t socket_get_name(int64_t sd, sockaddr_in6&amp; local) noexcept;\nuint32_t socket_get_peer(int64_t sd, sockaddr_in&amp; remote) noexcept;\nuint32_t socket_get_peer(int64_t sd, sockaddr_in6&amp; remote) noexcept;\nuint32_t socket_set_option(int64_t sd, int64_t level, //\nint64_t option, int64_t value) noexcept;\nuint32_t socket_set_option_nonblock(int64_t sd) noexcept;\nuint32_t socket_set_option_reuse_address(int64_t sd) noexcept;\nuint32_t socket_set_option_nodelay(int64_t sd) noexcept;\nuint32_t socket_set_option_send_timout(int64_t sd, //\nuint32_t us) noexcept;\nuint32_t socket_set_option_recv_timout(int64_t sd, //\nuint32_t us) noexcept;\nbool socket_would_block(uint32_t ec) noexcept;\n</code></pre> <p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"socket__test_8cpp/","title":"src/socket_test.cpp","text":""},{"location":"socket__test_8cpp/#functions","title":"Functions","text":"Name int main(int , char * [])"},{"location":"socket__test_8cpp/#functions-documentation","title":"Functions Documentation","text":""},{"location":"socket__test_8cpp/#function-main","title":"function main","text":"<pre><code>int main(\nint ,\nchar * []\n)\n</code></pre>"},{"location":"socket__test_8cpp/#source-code","title":"Source code","text":"<pre><code>#include \"socket.hpp\"\nint main(int, char*[]) {\nsocket_setup();\nsocket_teardown();\nreturn 0;\n}\n</code></pre> <p>Updated on 2023-06-05 at 18:28:33 +0900</p>"},{"location":"structaddrinfo/","title":"addrinfo","text":"<p>identify an Internet host and a service  More...</p> <p><code>#include &lt;socket.hpp&gt;</code></p>"},{"location":"structaddrinfo/#detailed-description","title":"Detailed Description","text":"<pre><code>struct addrinfo;\n</code></pre> <p>identify an Internet host and a service </p> <p>[https://docs.microsoft.com/en-us/windows/win32/api/ws2def/]</p> <p>Updated on 2023-06-05 at 18:28:33 +0900</p>"}]}