#
# Author: github.com/luncliff (luncliff@gmail.com)
#
# References
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates
#   https://developer.microsoft.com/en-us/windows/downloads/sdk-archive/
#   https://github.com/actions/virtual-environments/tree/main/images
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted
#

trigger:
  branches:
    exclude:
      - gh-pages

schedules:
  - cron: "30 4 * * 4"
    displayName: "Weekly check"
    branches:
      include:
        - main

jobs:
  - job: vs2022_msvc143
    pool:
      vmImage: "windows-2022"
    variables:
      configuration: Debug
      cmake.preset: x64-windows-debug
    steps:
      - task: CMake@1
        displayName: "CMake: Configure"
        inputs:
          cmakeArgs: --preset $(cmake.preset) -DCMAKE_INSTALL_PREFIX:PATH="$(Build.ArtifactStagingDirectory)"
          workingDirectory: "."
      - task: MSBuild@1
        inputs:
          solution: "build-x64-windows/ssf.sln"
          msbuildArchitecture: x64
          platform: x64
          configuration: $(configuration)
          msbuildArguments: "/p:platformtoolset=v143"
      - task: CMake@1
        displayName: "CMake: Install"
        inputs:
          cmakeArgs: --build --preset $(cmake.preset) --target install
          workingDirectory: "."
      - powershell: ctest --preset $(cmake.preset) --output-on-failure
        displayName: "CTest"

  - job: vs2022_clang13
    pool:
      vmImage: "windows-2022"
    strategy:
      matrix:
        debug_x86:
          vcvars.arg: x86
          cmake.preset: x86-clang-debug
        debug_x64:
          vcvars.arg: x64
          cmake.preset: x64-clang-debug
    steps:
      - task: ChocolateyCommand@0
        inputs:
          command: "install"
          installPackageId: "ninja"
          installInstallArgs: "--no-progress --yes"
      # see https://www.cicoria.com/using-vcvars64-vcvars-bat-from-powershell-and-azure-devops/
      - powershell: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $installPath = &$vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          echo "##vso[task.setvariable variable=vcvarsPath;isOutput=true]$installPath\VC\Auxiliary\Build\vcvarsall.bat"
        name: detected
        displayName: "PowerShell: Search vcvarsall.bat"
      # see https://github.com/Microsoft/azure-pipelines-tasks/issues/9737
      - script: | # using Cmdlet
          echo $(detected.vcvarsPath)
          call "$(detected.vcvarsPath)" $(vcvars.arg)
          cmake --preset $(cmake.preset) -DCMAKE_INSTALL_PREFIX:PATH="$(Build.ArtifactStagingDirectory)"
          cmake --build --preset $(cmake.preset)
        displayName: "CMake: Configure/Build(vcvarsall)"
      - task: CMake@1
        displayName: "CMake: Install"
        inputs:
          cmakeArgs: --build --target install --preset $(cmake.preset)
          workingDirectory: "."

  - job: vs2019_clang
    pool:
      vmImage: "windows-2019"
    strategy:
      matrix:
        debug_x86:
          vcvars.arg: x86
          cmake.preset: x86-clang-debug-vs2019
        debug_x64:
          vcvars.arg: x64
          cmake.preset: x64-clang-debug-vs2019
    steps:
      - task: ChocolateyCommand@0
        inputs:
          command: "install"
          installPackageId: "ninja"
          installInstallArgs: "--no-progress --yes"
      - task: ChocolateyCommand@0
        inputs:
          command: "install"
          installPackageId: "llvm"
          installInstallArgs: "--no-progress --yes"
      - powershell: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          $installPath = &$vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          echo "##vso[task.setvariable variable=vcvarsPath;isOutput=true]$installPath\VC\Auxiliary\Build\vcvarsall.bat"
        name: detected
        displayName: "PowerShell: Search vcvarsall.bat"
      - script: | # using Cmdlet
          echo $(detected.vcvarsPath)
          call "$(detected.vcvarsPath)" $(vcvars.arg)
          cmake --preset $(cmake.preset) -DCMAKE_INSTALL_PREFIX:PATH="$(Build.ArtifactStagingDirectory)"
          cmake --build --preset $(cmake.preset)
        displayName: "CMake: Configure/Build(vcvarsall)"
      - task: CMake@1
        displayName: "CMake: Install"
        inputs:
          cmakeArgs: --build --target install --preset $(cmake.preset)
          workingDirectory: "."

  - job: macos15_appleclang
    pool:
      vmImage: "macos-10.15"
    variables:
      configuration: Debug
      cmake.preset: x64-osx-debug
    steps:
      - powershell: brew install ninja conan
        displayName: "Setup: Homebrew packages"
      - task: CMake@1
        displayName: "CMake: Configure"
        inputs:
          cmakeArgs: --preset $(cmake.preset) -DCMAKE_INSTALL_PREFIX:PATH="$(Build.ArtifactStagingDirectory)"
          workingDirectory: "."
      - task: CMake@1
        displayName: "CMake: Build/Install"
        inputs:
          cmakeArgs: --build --preset $(cmake.preset) --target install
          workingDirectory: "."
      - powershell: ctest --preset $(cmake.preset) --output-on-failure
        displayName: "CTest"
      - powershell: |
          conan create . -s build_type=Debug
          conan create . -s build_type=Release
          conan create . -s build_type=RelWithDebInfo
        displayName: "Conan: Create packages"

  - job: mkdocs
    pool:
      vmImage: "macos-10.15"
    steps:
      - powershell: |
          brew install doxygen
          python3 -m pip install --user -r requirements.txt
        displayName: "Setup: Homebrew, Python3 packages"
      - powershell: |
          wget -q https://github.com/matusnovak/doxybook2/releases/download/v1.4.0/doxybook2-osx-amd64-v1.4.0.zip
          unzip ./doxybook2-osx-amd64-v1.4.0.zip -d externals
        displayName: "Setup: Doxybook2 1.4.0"
      - powershell: |
          doxygen ./docs/Doxyfile
          ./externals/bin/doxybook2 --input ./docs/xml --output ./docs
        displayName: "Run Doxygen and Doxybook2"
      - powershell: python3 -m mkdocs build # todo: gh-deploy
      # - task: ArchiveFiles@2
      #   inputs:
      #     rootFolderOrFile: "$(Build.SourcesDirectory)/docs"
      #     includeRootFolder: false
      #     archiveType: "zip"
      #     archiveFile: "$(Build.ArtifactStagingDirectory)/docs.zip"
      #     replaceExistingArchive: true
      - task: PublishBuildArtifacts@1
        inputs:
          # PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          PathtoPublish: "$(Build.SourcesDirectory)/docs"
          ArtifactName: "docs"
    dependsOn:
      - vs2022_msvc143
      - macos15_appleclang
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
