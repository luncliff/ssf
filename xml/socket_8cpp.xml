<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="ko">
  <compounddef id="socket_8cpp" kind="file" language="C++">
    <compoundname>socket.cpp</compoundname>
    <includes local="no">cerrno</includes>
    <includes local="no">chrono</includes>
    <includes local="no">system_error</includes>
    <includes refid="socket_8hpp" local="yes">socket.hpp</includes>
    <incdepgraph>
      <node id="1">
        <label>src/socket.cpp</label>
        <link refid="socket_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>socket.hpp</label>
        <link refid="socket_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cerrno</label>
      </node>
      <node id="3">
        <label>chrono</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="4">
        <label>system_error</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="socket_8cpp_1a2a069c7121e09a6fc4fba28178577e1c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t socket_create</definition>
        <argsstring>(const addrinfo &amp;hint) noexcept</argsstring>
        <name>socket_create</name>
        <param>
          <type>const <ref refid="structaddrinfo" kindref="compound">addrinfo</ref> &amp;</type>
          <declname>hint</declname>
        </param>
        <briefdescription>
<para>create a socket without error check </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="29" column="9" bodyfile="src/socket.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1adc5a948d26ca8d969205da03143cf676" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_create</definition>
        <argsstring>(const addrinfo &amp;hint, int64_t &amp;sd) noexcept</argsstring>
        <name>socket_create</name>
        <param>
          <type>const <ref refid="structaddrinfo" kindref="compound">addrinfo</ref> &amp;</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>create 1 socket </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hint</parametername>
</parameternamelist>
<parameterdescription>
<para>family, type, protocol </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to save the new socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="34" column="10" bodyfile="src/socket.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a57276ab3060b2acbb78378e321718415" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_bind</definition>
        <argsstring>(int64_t sd, const sockaddr_in &amp;local) noexcept</argsstring>
        <name>socket_bind</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>bind the socket to given address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to bind </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="39" column="10" bodyfile="src/socket.cpp" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1ab411d3fbc9c4e7763aedf7153b0f053d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_bind</definition>
        <argsstring>(int64_t sd, const sockaddr_in6 &amp;local) noexcept</argsstring>
        <name>socket_bind</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in6 &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>bind the socket to given address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to bind </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="44" column="10" bodyfile="src/socket.cpp" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a72ad64c8745e48923e497b8aec216d87" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_listen</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_listen</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>start listening with the socket </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>backlog</computeroutput> value is fixed to 7.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to start listen </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="51" column="10" bodyfile="src/socket.cpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a7589801a6bd5cc25c87ecd9f849d8281" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_connect</definition>
        <argsstring>(int64_t sd, const sockaddr_in &amp;remote) noexcept</argsstring>
        <name>socket_connect</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in &amp;</type>
          <declname>remote</declname>
        </param>
        <briefdescription>
<para>try connect to given endpoint(IPv4) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to start connect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="56" column="10" bodyfile="src/socket.cpp" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a6f812e13495c77a708e2c822434fdea8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_connect</definition>
        <argsstring>(int64_t sd, const sockaddr_in6 &amp;remote) noexcept</argsstring>
        <name>socket_connect</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in6 &amp;</type>
          <declname>remote</declname>
        </param>
        <briefdescription>
<para>try connect to given endpoint(IPv6) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to start connect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="63" column="10" bodyfile="src/socket.cpp" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1aa125c1c2710ac6ceee78b695f30d034b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_accept</definition>
        <argsstring>(int64_t ln, int64_t &amp;sd) noexcept</argsstring>
        <name>socket_accept</name>
        <param>
          <type>int64_t</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>accept a connection request and return client socket </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ln</parametername>
</parameternamelist>
<parameterdescription>
<para>listener socket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to descriptor to save the new connected socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="70" column="10" bodyfile="src/socket.cpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a031ce6ea7f741e6a5ecf4f711478c19e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_get_name</definition>
        <argsstring>(int64_t sd, sockaddr_in &amp;local) noexcept</argsstring>
        <name>socket_get_name</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>get the socket&apos;s address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to query the bound address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>object to receive IPv4 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="75" column="10" bodyfile="src/socket.cpp" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1ac81fc21babd2bc72b739ae064e077439" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_get_name</definition>
        <argsstring>(int64_t sd, sockaddr_in6 &amp;local) noexcept</argsstring>
        <name>socket_get_name</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in6 &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>get the socket&apos;s address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to query the bound address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>object to receive IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="82" column="10" bodyfile="src/socket.cpp" bodystart="82" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a1f32dff752b392575d4f07355231f9a8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_get_peer</definition>
        <argsstring>(int64_t sd, sockaddr_in &amp;local) noexcept</argsstring>
        <name>socket_get_peer</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>remote</declname>
          <defname>local</defname>
        </param>
        <briefdescription>
<para>get connected peer&apos;s address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to query the peer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para>object to receive IPv4 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="89" column="10" bodyfile="src/socket.cpp" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a3d677b115c9bb0e63a7550b903536a3c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_get_peer</definition>
        <argsstring>(int64_t sd, sockaddr_in6 &amp;local) noexcept</argsstring>
        <name>socket_get_peer</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in6 &amp;</type>
          <declname>remote</declname>
          <defname>local</defname>
        </param>
        <briefdescription>
<para>get connected peer&apos;s address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to query the peer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para>object to receive IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="96" column="10" bodyfile="src/socket.cpp" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1ac38c5ed28135ecd13934fa08933205f3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option</definition>
        <argsstring>(int64_t sd, int64_t level, int64_t option, int64_t value) noexcept</argsstring>
        <name>socket_set_option</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>option</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>change the socket&apos;s option </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="103" column="10" bodyfile="src/socket.cpp" bodystart="103" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1ad9e60a284fa6fd28dde3f57d28532404" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_reuse_address</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_set_option_reuse_address</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>make socket to reuse address </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="110" column="10" bodyfile="src/socket.cpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1aa6e8317a0c5c0255606c5e5260b5dc00" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_nodelay</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_set_option_nodelay</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>make tcp send without delay </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="114" column="10" bodyfile="src/socket.cpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a31f3fd04fb05988a7a3e6c5d1126badd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_timout</definition>
        <argsstring>(int64_t sd, chrono::microseconds us, int64_t option) noexcept</argsstring>
        <name>socket_set_option_timout</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>chrono::microseconds</type>
          <declname>us</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>option</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="118" column="10" bodyfile="src/socket.cpp" bodystart="118" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a11c23e9acbbffaf3f6c6861f8429d02a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_timout</definition>
        <argsstring>(int64_t sd, uint32_t us, int64_t option) noexcept</argsstring>
        <name>socket_set_option_timout</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>us</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>option</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="132" column="10" bodyfile="src/socket.cpp" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a4ea73aaf08802fdca753351ef3227487" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_send_timout</definition>
        <argsstring>(int64_t sd, uint32_t us) noexcept</argsstring>
        <name>socket_set_option_send_timout</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>us</declname>
        </param>
        <briefdescription>
<para>set the socket&apos;s send timeout </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to change timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>us</parametername>
</parameternamelist>
<parameterdescription>
<para>microsecond fot the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="136" column="10" bodyfile="src/socket.cpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="socket_8cpp_1a8a082d28ab13d3f27efd086e16303c6a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_recv_timout</definition>
        <argsstring>(int64_t sd, uint32_t us) noexcept</argsstring>
        <name>socket_set_option_recv_timout</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>us</declname>
        </param>
        <briefdescription>
<para>set the socket&apos;s recv timeout </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to change timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>us</parametername>
</parameternamelist>
<parameterdescription>
<para>microsecond fot the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.cpp" line="140" column="10" bodyfile="src/socket.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;system_error&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;socket.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;WinSock2.h&gt;)<sp/></highlight><highlight class="comment">//<sp/>use<sp/>winsock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;WS2tcpip.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;WinSock2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ws2def.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__has_include(&lt;netinet/in.h&gt;)<sp/></highlight><highlight class="comment">//<sp/>use<sp/>netinet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netdb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/in.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;netinet/tcp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/socket.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">int64_t<sp/>socket_create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structaddrinfo" kindref="compound">addrinfo</ref>&amp;<sp/>hint)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::socket(hint.ai_family,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hint.ai_socktype,<sp/>hint.ai_protocol);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">uint32_t<sp/>socket_create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structaddrinfo" kindref="compound">addrinfo</ref>&amp;<sp/>hint,<sp/>int64_t&amp;<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>sd<sp/>=<sp/>socket_create(hint);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sd<sp/>&lt;<sp/>0<sp/>?<sp/>socket_recent()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">uint32_t<sp/>socket_bind(int64_t<sp/>sd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sockaddr_in&amp;<sp/>local)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::bind(sd,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sockaddr*)&amp;local,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in)))</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal">uint32_t<sp/>socket_bind(int64_t<sp/>sd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sockaddr_in6&amp;<sp/>local)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bind<sp/>socket<sp/>and<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::bind(sd,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sockaddr*)&amp;local,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in6)))</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">uint32_t<sp/>socket_listen(int64_t<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>::listen(sd,<sp/>7);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">uint32_t<sp/>socket_connect(int64_t<sp/>sd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sockaddr_in&amp;<sp/>remote)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">sockaddr*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;remote);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::connect(sd,<sp/>ptr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">uint32_t<sp/>socket_connect(int64_t<sp/>sd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sockaddr_in6&amp;<sp/>remote)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">sockaddr*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;remote);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::connect(sd,<sp/>ptr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in6))<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">uint32_t<sp/>socket_accept(int64_t<sp/>ln,<sp/>int64_t&amp;<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>sd<sp/>=<sp/>::accept(ln,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">uint32_t<sp/>socket_get_name(int64_t<sp/>sd,<sp/>sockaddr_in&amp;<sp/>local)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::getsockname(sd,<sp/>(sockaddr*)&amp;local,<sp/>&amp;len))</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">uint32_t<sp/>socket_get_name(int64_t<sp/>sd,<sp/>sockaddr_in6&amp;<sp/>local)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in6);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::getsockname(sd,<sp/>(sockaddr*)&amp;local,<sp/>&amp;len))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">uint32_t<sp/>socket_get_peer(int64_t<sp/>sd,<sp/>sockaddr_in&amp;<sp/>local)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::getpeername(sd,<sp/>(sockaddr*)&amp;local,<sp/>&amp;len))</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">uint32_t<sp/>socket_get_peer(int64_t<sp/>sd,<sp/>sockaddr_in6&amp;<sp/>local)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in6);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::getpeername(sd,<sp/>(sockaddr*)&amp;local,<sp/>&amp;len))</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal">uint32_t<sp/>socket_set_option(int64_t<sp/>sd,<sp/>int64_t<sp/>level,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>option,<sp/>int64_t<sp/>value)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ec<sp/>=<sp/>::setsockopt(sd,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(level),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(option),<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;value,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(value)))</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">uint32_t<sp/>socket_set_option_reuse_address(int64_t<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_set_option(sd,<sp/>SOL_SOCKET,<sp/>SO_REUSEADDR,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">uint32_t<sp/>socket_set_option_nodelay(int64_t<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_set_option(sd,<sp/>IPPROTO_TCP,<sp/>TCP_NODELAY,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">uint32_t<sp/>socket_set_option_timout(int64_t<sp/>sd,<sp/>chrono::microseconds<sp/>us,<sp/>int64_t<sp/>option)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>chrono::duration_cast&lt;chrono::seconds&gt;(us);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>us<sp/>-=<sp/>s;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>timeval<sp/>timeout{};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>timeout.tv_sec<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">decltype(timeout.tv_sec)</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s.count());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>timeout.tv_usec<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">decltype(timeout.tv_usec)</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(us.count());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::setsockopt(sd,<sp/>SOL_SOCKET,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(option),<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;timeout,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(timeval))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_recent();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">uint32_t<sp/>socket_set_option_timout(int64_t<sp/>sd,<sp/>uint32_t<sp/>us,<sp/>int64_t<sp/>option)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_set_option_timout(sd,<sp/>chrono::microseconds{us},<sp/>option);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal">uint32_t<sp/>socket_set_option_send_timout(int64_t<sp/>sd,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>us)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_set_option_timout(sd,<sp/>chrono::microseconds{us},<sp/>SO_SNDTIMEO);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal">uint32_t<sp/>socket_set_option_recv_timout(int64_t<sp/>sd,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>us)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>socket_set_option_timout(sd,<sp/>chrono::microseconds{us},<sp/>SO_RCVTIMEO);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;WinSock2.h&gt;)<sp/></highlight><highlight class="comment">//<sp/>using<sp/>winsock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>socket_is_valid(int64_t<sp/>h)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h<sp/>!=<sp/>INVALID_SOCKET;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">WSADATA<sp/>wsa_data{};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>socket_setup()<sp/>noexcept(false)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wsa_data.wVersion)<sp/></highlight><highlight class="comment">//<sp/>already<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>init<sp/>version<sp/>2.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::WSAStartup(MAKEWORD(2,<sp/>2),<sp/>&amp;wsa_data))<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>errc<sp/>=<sp/>WSAGetLastError();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>system_error{errc,<sp/>system_category(),<sp/></highlight><highlight class="stringliteral">&quot;WSAStartup&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>socket_teardown()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>initialized<sp/>or<sp/>released</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wsa_data.wVersion<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>::WSACleanup();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>wsa_data.wVersion<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">uint32_t<sp/>socket_recent()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(WSAGetLastError());</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>socket_would_block(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ec)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ec<sp/>==<sp/>WSAEWOULDBLOCK<sp/>||<sp/>ec<sp/>==<sp/>EWOULDBLOCK<sp/>||<sp/>ec<sp/>==<sp/>EINPROGRESS<sp/>||<sp/>ec<sp/>==<sp/>ERROR_IO_PENDING;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">uint32_t<sp/>socket_close(int64_t<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::shutdown(sd,<sp/>SD_BOTH),<sp/>::closesocket(sd);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">uint32_t<sp/>socket_set_option_nonblock(int64_t<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>u_long<sp/>mode<sp/>=<sp/>TRUE;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::ioctlsocket(sd,<sp/>FIONBIO,<sp/>&amp;mode);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>__has_include(&lt;netinet/in.h&gt;)<sp/></highlight><highlight class="comment">//<sp/>using<sp/>netinet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>socket_is_valid(int64_t<sp/>h)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>h<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>socket_setup()<sp/>noexcept(false)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing<sp/>for<sp/>posix<sp/>system.<sp/>network<sp/>operation<sp/>already<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>socket_teardown()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">uint32_t<sp/>socket_recent()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(errno);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>socket_would_block(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ec)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ec<sp/>==<sp/>EINPROGRESS;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">uint32_t<sp/>socket_close(int64_t<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shutdown(sd,<sp/>SHUT_RDWR),<sp/>close(sd),<sp/>errno;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">uint32_t<sp/>socket_set_option_nonblock(int64_t<sp/>sd)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>non-block/async</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcntl(sd,<sp/>F_SETFL,<sp/>O_NONBLOCK)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errno;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/socket.cpp"/>
  </compounddef>
</doxygen>
