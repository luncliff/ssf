<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="ko">
  <compounddef id="socket_8hpp" kind="file" language="C++">
    <compoundname>socket.hpp</compoundname>
    <includes local="no">cstdint</includes>
    <includedby refid="socket_8cpp" local="yes">src/socket.cpp</includedby>
    <includedby refid="socket__test_8cpp" local="yes">src/socket_test.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/socket.hpp</label>
        <link refid="socket_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstdint</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="socket_8hpp_1ad019c4466fd89e629acf64801e8d0885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void socket_setup</definition>
        <argsstring>() noexcept(false)</argsstring>
        <name>socket_setup</name>
        <briefdescription>
<para>initialize platform specific network module </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::system_error</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="21" column="6" declfile="src/socket.hpp" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a77f25219e6e9039834edc7ca4e7507f6" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void socket_teardown</definition>
        <argsstring>() noexcept</argsstring>
        <name>socket_teardown</name>
        <briefdescription>
<para>release platform specific network module </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="26" column="6" declfile="src/socket.hpp" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a7a59135fe52e91d37ef54b74a155174e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_recent</definition>
        <argsstring>() noexcept</argsstring>
        <name>socket_recent</name>
        <briefdescription>
<para>network related error </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="33" column="10" declfile="src/socket.hpp" declline="33" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a080f80d234bca59ac52d59738c314246" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool socket_is_valid</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_is_valid</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>check if given socket descriptor is valid </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true the sd is considered valid </para>
</simplesect>
<simplesect kind="return"><para>false negative or <computeroutput>INVALID_SOCKET</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="42" column="6" declfile="src/socket.hpp" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1adc5a948d26ca8d969205da03143cf676" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_create</definition>
        <argsstring>(const addrinfo &amp;hint, int64_t &amp;sd) noexcept</argsstring>
        <name>socket_create</name>
        <param>
          <type>const <ref refid="structaddrinfo" kindref="compound">addrinfo</ref> &amp;</type>
          <declname>hint</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>create 1 socket </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hint</parametername>
</parameternamelist>
<parameterdescription>
<para>family, type, protocol </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to save the new socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="50" column="10" bodyfile="src/socket.cpp" bodystart="34" bodyend="37" declfile="src/socket.hpp" declline="50" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1ac875491f2445520c5ac8b9ddfc55ad57" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_close</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_close</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>dispose the given socket </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="58" column="10" declfile="src/socket.hpp" declline="58" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a57276ab3060b2acbb78378e321718415" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_bind</definition>
        <argsstring>(int64_t sd, const sockaddr_in &amp;local) noexcept</argsstring>
        <name>socket_bind</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>bind the socket to given address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to bind </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="67" column="10" bodyfile="src/socket.cpp" bodystart="39" bodyend="43" declfile="src/socket.hpp" declline="67" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1ab411d3fbc9c4e7763aedf7153b0f053d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_bind</definition>
        <argsstring>(int64_t sd, const sockaddr_in6 &amp;local) noexcept</argsstring>
        <name>socket_bind</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in6 &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>bind the socket to given address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to bind </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="76" column="10" bodyfile="src/socket.cpp" bodystart="44" bodyend="49" declfile="src/socket.hpp" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a72ad64c8745e48923e497b8aec216d87" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_listen</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_listen</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>start listening with the socket </para>
        </briefdescription>
        <detaileddescription>
<para>The <computeroutput>backlog</computeroutput> value is fixed to 7.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to start listen </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="86" column="10" bodyfile="src/socket.cpp" bodystart="51" bodyend="54" declfile="src/socket.hpp" declline="86" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a7589801a6bd5cc25c87ecd9f849d8281" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_connect</definition>
        <argsstring>(int64_t sd, const sockaddr_in &amp;remote) noexcept</argsstring>
        <name>socket_connect</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in &amp;</type>
          <declname>remote</declname>
        </param>
        <briefdescription>
<para>try connect to given endpoint(IPv4) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to start connect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv4 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="95" column="10" bodyfile="src/socket.cpp" bodystart="56" bodyend="61" declfile="src/socket.hpp" declline="95" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a6f812e13495c77a708e2c822434fdea8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_connect</definition>
        <argsstring>(int64_t sd, const sockaddr_in6 &amp;remote) noexcept</argsstring>
        <name>socket_connect</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>const sockaddr_in6 &amp;</type>
          <declname>remote</declname>
        </param>
        <briefdescription>
<para>try connect to given endpoint(IPv6) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to start connect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para>IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="104" column="10" bodyfile="src/socket.cpp" bodystart="63" bodyend="68" declfile="src/socket.hpp" declline="104" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1aa125c1c2710ac6ceee78b695f30d034b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_accept</definition>
        <argsstring>(int64_t ln, int64_t &amp;sd) noexcept</argsstring>
        <name>socket_accept</name>
        <param>
          <type>int64_t</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>accept a connection request and return client socket </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ln</parametername>
</parameternamelist>
<parameterdescription>
<para>listener socket </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to descriptor to save the new connected socket </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="113" column="10" bodyfile="src/socket.cpp" bodystart="70" bodyend="73" declfile="src/socket.hpp" declline="113" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a031ce6ea7f741e6a5ecf4f711478c19e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_get_name</definition>
        <argsstring>(int64_t sd, sockaddr_in &amp;local) noexcept</argsstring>
        <name>socket_get_name</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>get the socket&apos;s address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to query the bound address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>object to receive IPv4 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="122" column="10" bodyfile="src/socket.cpp" bodystart="75" bodyend="80" declfile="src/socket.hpp" declline="122" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1ac81fc21babd2bc72b739ae064e077439" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_get_name</definition>
        <argsstring>(int64_t sd, sockaddr_in6 &amp;local) noexcept</argsstring>
        <name>socket_get_name</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in6 &amp;</type>
          <declname>local</declname>
        </param>
        <briefdescription>
<para>get the socket&apos;s address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to query the bound address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local</parametername>
</parameternamelist>
<parameterdescription>
<para>object to receive IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="131" column="10" bodyfile="src/socket.cpp" bodystart="82" bodyend="87" declfile="src/socket.hpp" declline="131" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a24bb544db5c840caf9fccd20c628cb61" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_get_peer</definition>
        <argsstring>(int64_t sd, sockaddr_in &amp;remote) noexcept</argsstring>
        <name>socket_get_peer</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in &amp;</type>
          <declname>remote</declname>
        </param>
        <briefdescription>
<para>get connected peer&apos;s address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to query the peer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para>object to receive IPv4 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="140" column="10" bodyfile="src/socket.cpp" bodystart="89" bodyend="94" declfile="src/socket.hpp" declline="140" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a34d1fb5bb98fa31fca52b88d81534276" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_get_peer</definition>
        <argsstring>(int64_t sd, sockaddr_in6 &amp;remote) noexcept</argsstring>
        <name>socket_get_peer</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>sockaddr_in6 &amp;</type>
          <declname>remote</declname>
        </param>
        <briefdescription>
<para>get connected peer&apos;s address </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to query the peer address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remote</parametername>
</parameternamelist>
<parameterdescription>
<para>object to receive IPv6 address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="149" column="10" bodyfile="src/socket.cpp" bodystart="96" bodyend="101" declfile="src/socket.hpp" declline="149" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1ac38c5ed28135ecd13934fa08933205f3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option</definition>
        <argsstring>(int64_t sd, int64_t level, int64_t option, int64_t value) noexcept</argsstring>
        <name>socket_set_option</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>level</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>option</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>change the socket&apos;s option </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>option</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="160" column="10" bodyfile="src/socket.cpp" bodystart="103" bodyend="108" declfile="src/socket.hpp" declline="160" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1aab48cce81295876864e04fb3638a8408" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_nonblock</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_set_option_nonblock</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>make socket to operate in non-blocking mode </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="168" column="10" declfile="src/socket.hpp" declline="168" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1ad9e60a284fa6fd28dde3f57d28532404" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_reuse_address</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_set_option_reuse_address</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>make socket to reuse address </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="175" column="10" bodyfile="src/socket.cpp" bodystart="110" bodyend="112" declfile="src/socket.hpp" declline="175" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1aa6e8317a0c5c0255606c5e5260b5dc00" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_nodelay</definition>
        <argsstring>(int64_t sd) noexcept</argsstring>
        <name>socket_set_option_nodelay</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <briefdescription>
<para>make tcp send without delay </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="182" column="10" bodyfile="src/socket.cpp" bodystart="114" bodyend="116" declfile="src/socket.hpp" declline="182" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a4ea73aaf08802fdca753351ef3227487" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_send_timout</definition>
        <argsstring>(int64_t sd, uint32_t us) noexcept</argsstring>
        <name>socket_set_option_send_timout</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>us</declname>
        </param>
        <briefdescription>
<para>set the socket&apos;s send timeout </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to change timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>us</parametername>
</parameternamelist>
<parameterdescription>
<para>microsecond fot the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="191" column="10" bodyfile="src/socket.cpp" bodystart="136" bodyend="139" declfile="src/socket.hpp" declline="191" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a8a082d28ab13d3f27efd086e16303c6a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t socket_set_option_recv_timout</definition>
        <argsstring>(int64_t sd, uint32_t us) noexcept</argsstring>
        <name>socket_set_option_recv_timout</name>
        <param>
          <type>int64_t</type>
          <declname>sd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>us</declname>
        </param>
        <briefdescription>
<para>set the socket&apos;s recv timeout </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sd</parametername>
</parameternamelist>
<parameterdescription>
<para>socket to change timeout </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>us</parametername>
</parameternamelist>
<parameterdescription>
<para>microsecond fot the duration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code from <computeroutput>errno</computeroutput> or <computeroutput>WSAGetLastError</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="201" column="10" bodyfile="src/socket.cpp" bodystart="140" bodyend="143" declfile="src/socket.hpp" declline="201" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="socket_8hpp_1a901db3d71d4a694562fda404e8a8e547" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool socket_would_block</definition>
        <argsstring>(uint32_t ec) noexcept</argsstring>
        <name>socket_would_block</name>
        <param>
          <type>uint32_t</type>
          <declname>ec</declname>
        </param>
        <briefdescription>
<para>test if the error code is for non-blocking </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/socket.hpp" line="207" column="6" declfile="src/socket.hpp" declline="207" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structaddrinfo" kindref="compound">addrinfo</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>socket_setup()<sp/>noexcept(false);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>socket_teardown()<sp/>noexcept;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">uint32_t<sp/>socket_recent()<sp/>noexcept;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>socket_is_valid(int64_t<sp/>sd)<sp/>noexcept;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">uint32_t<sp/>socket_create(const<sp/><ref refid="structaddrinfo" kindref="compound">addrinfo</ref>&amp;<sp/>hint,<sp/>int64_t&amp;<sp/>sd)<sp/>noexcept;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">uint32_t<sp/>socket_close(int64_t<sp/>sd)<sp/>noexcept;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">uint32_t<sp/>socket_bind(int64_t<sp/>sd,<sp/>const<sp/>sockaddr_in&amp;<sp/>local)<sp/>noexcept;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">uint32_t<sp/>socket_bind(int64_t<sp/>sd,<sp/>const<sp/>sockaddr_in6&amp;<sp/>local)<sp/>noexcept;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">uint32_t<sp/>socket_listen(int64_t<sp/>sd)<sp/>noexcept;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">uint32_t<sp/>socket_connect(int64_t<sp/>sd,<sp/>const<sp/>sockaddr_in&amp;<sp/>remote)<sp/>noexcept;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">uint32_t<sp/>socket_connect(int64_t<sp/>sd,<sp/>const<sp/>sockaddr_in6&amp;<sp/>remote)<sp/>noexcept;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">uint32_t<sp/>socket_accept(int64_t<sp/>ln,<sp/>int64_t&amp;<sp/>sd)<sp/>noexcept;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">uint32_t<sp/>socket_get_name(int64_t<sp/>sd,<sp/>sockaddr_in&amp;<sp/>local)<sp/>noexcept;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">uint32_t<sp/>socket_get_name(int64_t<sp/>sd,<sp/>sockaddr_in6&amp;<sp/>local)<sp/>noexcept;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">uint32_t<sp/>socket_get_peer(int64_t<sp/>sd,<sp/>sockaddr_in&amp;<sp/>remote)<sp/>noexcept;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">uint32_t<sp/>socket_get_peer(int64_t<sp/>sd,<sp/>sockaddr_in6&amp;<sp/>remote)<sp/>noexcept;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">uint32_t<sp/>socket_set_option(int64_t<sp/>sd,<sp/>int64_t<sp/>level,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>option,<sp/>int64_t<sp/>value)<sp/>noexcept;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">uint32_t<sp/>socket_set_option_nonblock(int64_t<sp/>sd)<sp/>noexcept;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">uint32_t<sp/>socket_set_option_reuse_address(int64_t<sp/>sd)<sp/>noexcept;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">uint32_t<sp/>socket_set_option_nodelay(int64_t<sp/>sd)<sp/>noexcept;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">uint32_t<sp/>socket_set_option_send_timout(int64_t<sp/>sd,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>us)<sp/>noexcept;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">uint32_t<sp/>socket_set_option_recv_timout(int64_t<sp/>sd,<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>us)<sp/>noexcept;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>socket_would_block(uint32_t<sp/>ec)<sp/>noexcept;</highlight></codeline>
    </programlisting>
    <location file="src/socket.hpp"/>
  </compounddef>
</doxygen>
